#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster');

var cpuCores = require('os').cpus().length;


var helperServer = require('../socket-server/socket_server.js');
var asyLoader = require('../asyncModules/asyncLoader');
var signal = new asyLoader.Signal();

signal.on('start', start);

asyLoader.dbModules.then(data => signal.emit('start', data));

var debug = require('debug')('shoutbox:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

/**
 * Create HTTP server.
 */

var server;


function start(data) {


  var { models } = data;


  var { initialize, shareAble } = require('../app');

  var app = initialize(models);


  app.set('port', port);



  server = http.createServer(app);


  server.listen(port);

  helperServer.listen(server);

  shareAble.socketModules = helperServer.SK;


  server.on('error', onError);
  server.on('listening',
    function () {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
    });

  }

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

